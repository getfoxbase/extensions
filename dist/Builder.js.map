{"version":3,"sources":["../src/Builder.js"],"names":["Builder","buildFromGit","url","vol","Volume","fromJSON","git","clone","fs","http","dir","singleBranch","depth","files","Object","fromEntries","entries","toJSON","filter","file","substring","map","substr","build","ensureDirectoryExistence","filePath","dirname","path","existsSync","mkdirSync","sourceFiles","buildId","filename","writeFileSync","mainScript","packageJson","JSON","parse","readFileSync","main","inputOptions","input","plugins","pkgFile","manager","transformMixedEsModules","esmExternals","babelHelpers","outputOptions","format","bundle","output","generate","code","close","unlinkSync","rmdirSync","recursive"],"mappings":"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","sourcesContent":["import { rollup } from 'rollup'\r\nimport autoResolve from '@rollup/plugin-auto-install'\r\nimport commonjs from '@rollup/plugin-commonjs'\r\nimport { nodeResolve } from '@rollup/plugin-node-resolve'\r\nimport { babel } from '@rollup/plugin-babel'\r\nimport { terser } from \"rollup-plugin-terser\"\r\nimport { v4 as uuid } from 'uuid'\r\nimport { Volume } from 'memfs'\r\nimport fs from 'fs'\r\nimport path from 'path'\r\nimport git from 'isomorphic-git'\r\nimport http from 'isomorphic-git/http/node'\r\n\r\nexport default class Builder {\r\n    static async buildFromGit(url) {\r\n        const vol = Volume.fromJSON({}, `/`)\r\n        \r\n        await git.clone({\r\n            fs: vol,\r\n            http,\r\n            dir: `/`,\r\n            url,\r\n            singleBranch: true,\r\n            depth: 1\r\n        })\r\n\r\n        const files = Object.fromEntries(\r\n            Object.entries(vol.toJSON())\r\n                .filter(file => file[0].substring(0, 6) !== '/.git/')\r\n                .map(file => {\r\n                    file[0] = file[0].substr(1)\r\n                    return file\r\n                })\r\n        )\r\n\r\n        return await this.build(files)\r\n    }\r\n\r\n    static ensureDirectoryExistence(filePath) {\r\n        const dirname = path.dirname(filePath)\r\n        if (fs.existsSync(dirname)) {\r\n          return true\r\n        }\r\n        this.ensureDirectoryExistence(dirname)\r\n        fs.mkdirSync(dirname)\r\n      }\r\n\r\n    static async build(sourceFiles) {\r\n        const buildId = uuid()\r\n\r\n        // Create folder and files\r\n        fs.mkdirSync(`./${buildId}`)\r\n        for (const filename in sourceFiles) {\r\n            this.ensureDirectoryExistence(`./${buildId}/${filename}`)\r\n            fs.writeFileSync(`./${buildId}/${filename}`, sourceFiles[filename])\r\n        }\r\n        \r\n        // Determine main script\r\n        let mainScript = 'index.js'\r\n        if (fs.existsSync(`./${buildId}/package.json`)) {\r\n            try {\r\n                let packageJson = JSON.parse(fs.readFileSync(`./${buildId}/package.json`))\r\n                mainScript = packageJson.main ?? 'index.js'\r\n            } catch {}\r\n        }\r\n\r\n        // Rollup options\r\n        const inputOptions = {\r\n            input: `./${buildId}/${mainScript}`,\r\n            plugins: [autoResolve({\r\n                pkgFile: `./${buildId}/package.json`,\r\n                manager: 'npm'\r\n            }), nodeResolve(), commonjs({\r\n                transformMixedEsModules: true,\r\n                esmExternals: true\r\n            }), babel({ babelHelpers: 'bundled' }), terser()]\r\n        }\r\n        const outputOptions = {\r\n            file: `./${buildId}/__build__.js`,\r\n            format: 'cjs'\r\n        }\r\n\r\n        // Build with Rollup and Babel\r\n        const bundle = await rollup(inputOptions)\r\n        const { output } = await bundle.generate(outputOptions);\r\n        const code = output[0]?.code\r\n        await bundle.close()\r\n\r\n        // Clean build folder\r\n        for (const filename in sourceFiles) {\r\n            fs.unlinkSync(`./${buildId}/${filename}`)\r\n        }\r\n        if (fs.existsSync(`./${buildId}/package.json`)) {\r\n            fs.unlinkSync(`./${buildId}/package.json`)\r\n        }\r\n        fs.rmdirSync(`./${buildId}`, {\r\n            recursive: true\r\n        })\r\n\r\n        return code\r\n    }\r\n}"],"file":"Builder.js"}